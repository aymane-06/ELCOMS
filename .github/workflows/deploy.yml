name: Deploy Application

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to Production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        script: |
          # Enter project directory
          cd ~/domains/elcoms.ma/public_html/ELCOMS/
          
          echo "Starting deployment process..."
          
          # Check if it's a git repository, if not initialize it
          if [ ! -d .git ]; then
            echo "Initializing git repository..."
            git init
            git remote add origin https://github.com/aymane-06/ELCOMS
          fi
          
          # Show current branch and remotes for debugging
          echo "Current git status:"
          git status
          echo "Remote repositories:"
          git remote -v
          
          # Fetch and pull latest changes - using main branch
          echo "Fetching latest code from main branch..."
          git fetch --all
          git checkout -f main || git checkout -f main  # Try both branches
          git reset --hard origin/main || git reset --hard origin/main  # Try both branches
          
          # Set file permissions
          echo "Setting file permissions..."
          chmod -R 755 .
          chmod -R 777 storage bootstrap/cache
          
          # Install Composer 2 locally if needed
          if [ ! -f composer.phar ]; then
            echo "Installing Composer..."
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php composer-setup.php --install-dir=. --filename=composer.phar
            php -r "unlink('composer-setup.php');"
          fi
          
          # Install dependencies
          echo "Installing dependencies..."
          php composer.phar install --no-dev --optimize-autoloader
          
          # Install Faker for seeds
          echo "Installing Faker..."
          php -d memory_limit=-1 composer.phar require fakerphp/faker
          
          # Fix potential case sensitivity issues with factory files
          echo "Checking factory file names..."
          # Create proper case files if needed
          if [ -f database/factories/barberShopFactory.php ] && [ ! -f database/factories/BarberShopFactory.php ]; then
            echo "Copying barberShopFactory.php to BarberShopFactory.php..."
            cp database/factories/barberShopFactory.php database/factories/BarberShopFactory.php
            # Update class name in file
            sed -i 's/class barberShopFactory/class BarberShopFactory/g' database/factories/BarberShopFactory.php
          fi
          
          # Clear caches
          echo "Clearing Laravel caches..."
          php artisan cache:clear
          php artisan config:clear
          php artisan route:clear
          php artisan view:clear
          
          composer dump-autoload
          php artisan optimize:clear

          # Set up file storage
          echo "Setting up file storage..."
          php artisan storage:link
          chmod -R 775 storage
          chmod -R 775 public/storage

          # Run Laravel commands
          echo "Running migrations..."
          php artisan migrate:fresh --force
          
          echo "Running seeders..."
          php artisan db:seed --force || echo "Seeding failed, but continuing deployment"

          # Start queue workers
          echo "Starting queue workers..."
          php artisan queue:restart
          
          # Make sure supervisor restarts the queue workers if using supervisor
          if command -v supervisorctl &> /dev/null; then
            echo "Restarting supervisor queue workers..."
            supervisorctl restart all
          else
            # Start queue worker as background process if supervisor is not available
            echo "Starting queue worker as background process..."
            nohup php artisan queue:work --daemon --tries=3 > storage/logs/queue.log 2>&1 &
          fi    

          echo "Deployment completed!"

